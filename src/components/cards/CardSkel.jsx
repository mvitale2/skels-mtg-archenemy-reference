// 90% generated by ChatGPT
// https://chatgpt.com/share/67191d84-87d4-800c-826a-63a1bb41fa6e

import { useState, useEffect } from "react";

const CardSkel = (props) => {
  const [Cards, setCards] = useState([]);
  const Reprints = [
    "Behold the Power of Destruction",
    "Choose Your Champion",
    "My Crushing Masterstroke",
    "Choose Your Demise",
    "My Laughter Echoes",
    "When Will You Learn",
  ];

  useEffect(() => {
    console.log("reloaded cards")
    // For the silly methods that can't use non-literal strings (looking at you replace & glob >:[)
    let filePath = "";
    let rmPath = "";
    if (props.set_code == "oarc") {
      filePath = import.meta.glob("../../assets/oarc/*.jpg");
      rmPath = "/src/assets/oarc/";
    } else if (props.set_code == "oe01") {
      filePath = import.meta.glob("../../assets/oe01/*.jpg");
      rmPath = "/src/assets/oe01/";
    } else if (props.set_code == "dsc") {
      filePath = import.meta.glob("../../assets/dsc/*.jpg");
      rmPath = "/src/assets/dsc/";
    }

    const images = filePath;
    let cardList = [];
    let index = 0;

    // Fetch all image paths and build card list
    const loadImages = async () => {
      for (const path in images) {
        await images[path](); // Wait for each image to be imported
        // Vite serves assets in the src/assets folder as /src/assets/
        const publicPath = path.replace("../../assets", "/src/assets");
        // Get the file name
        const fileName = publicPath.replace(rmPath, "");
        // Get the card title for displaying/filtering
        const cardTitle = fileName.replace(/_/g, " ").replace(".jpg", "");

        // Filter out older versions of cards and only display those same cards from dsc (the latest version)
        if (props.reprints || props.set_code == "dsc" || (!Reprints.includes(cardTitle) || props.dsc == false)) {
          cardList.push({
            image: publicPath,
            title: cardTitle,
            id: index,
          });
        }
        index += 1;
      }

      // Update state once all images are loaded
      setCards(cardList);
    };

    loadImages(); // Trigger the async loading function
  }, []);

  return (
    <>
      {Cards.map((card) => (
        <div className="card" key={card.id}>
          <img src={card.image} alt={`Card ${card.id}`} />
          <span>Title: {card.title}</span>
          <span>Set: {`${props.set_code}`}</span>
        </div>
      ))}
    </>
  );
};

export default CardSkel;
